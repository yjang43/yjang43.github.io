I"æ<p>Benepar (Berkley Neural Parser) is a current state-of-the-art constituency parser.
The implementation of the logic is in a paper by Kitaev and Klein (2018), ‚ÄúConstituency Parsing with a Self-Attentive Encoder‚Äù.
In a summary, it is a transformer architecture to made decision on the best constituency tree structure each of which are constructed by CKY (Cocke-Kasami-Younger) algorithm.</p>

<h2 id="context-free-grammar">Context Free Grammar</h2>
<p>To understand constituency parsing, knowing CFG (Context Free Grammar) is important.
CFG is a set of grammar rules in which one needs no prior understanding of context of a sentence.
Here are some examples:</p>

<ul>
  <li>S ‚Üí NP VP</li>
  <li>VP ‚Üí Verb NP</li>
</ul>

<p>S, NP, and VP denotes setence, noun phrase, and verb phrase respectively.
There are many more rules.
This means, there are multiple formation of parsed tree given a sentence with many grammar rules.</p>

<p align="center">
    <img src="/assets/img/benepar_example.png" alt="multiple parsed trees" width="50%" />
    <figcaption style="color: gray; font-size:12px; text-align:center">an example where multiple parsed trees exist</figcaption>
</p>

<p>There is a need of scoring system of such that predicts a correct parsed tree, and to do so, neural network comes to the rescue.</p>

<h2 id="model-architecture">Model Architecture</h2>
<p>Kitaev and Klein were inspired by previous works of Stern et al (2017) and Gaddy et al (2018).
The model Kitaev and Klein proposed is very similar to theirs with the only difference in that contextual span embedding is produced by transformer architecture.</p>

<p align="center">
    <img src="/assets/img/benepar_architecture.png" alt="benepar architecture" width="50%" />
    <figcaption style="color: gray; font-size:12px; text-align:center">benepar architecture</figcaption>
</p>

<p>Despite how well transformer architecture works compared to a previous BiLSTM archtiecture, I personally find the way of producing span representation awkward.</p>

<p>Previsouly in Gaddy et al (2018), span is \(r_{ij} = [f_j - f_i; b_i - b_j]\), which is a concatanation of the difference from point \(i\) to \(j\) of LSTM‚Äôs forward and backward direction.
This formation is very intuitive once understood that forward representation of point \(i\) represents context upto \(i\) and point \(j\) upto \(j\), meaning subtraction of forward pass of \(j\) and \(i\) will result in the portion of representation equivalent to from \(i\) to \(j\).</p>

<p>However, Kitaev and Klein mimic the formation of span representation by splitting a token representation in half and pretend each to be forward and backward representation of the token.</p>

<p>Once span representations are produced, score of the span to corresponding label is produced by the following feed forward network:</p>

<div style="width: 100%; overflow: scroll;">
$$ s(i, j, l) = [W_2g(W_1r_{ij} + z_1) + z_2]_l $$
</div>

<p>g, z, and W are ReLU activation function, bias, and weight.</p>

<p>By summing span scores, \(s(i, j, l)\), of a tree \(T\), we finally get the score of a tree.</p>

<div style="width: 100%; overflow: scroll;">
$$ s(T) = \sum_{(i,j,l) \in T} s(i,j,l)$$
</div>

<p>Here \((i, j, l) \in T\) can be considered as constituents in a candidate parsed tree from CKY algorithm.</p>

<p>And at test time or inference time, the optimal parsed tree will be</p>

\[\hat {T} = arg\max_T s(T)\]

<p>For train time, the model is trained with hinge loss in the following form:</p>

<div style="width: 100%; overflow: scroll;">
$$ max(0, \max_{T\neq T^*}[s(T) + \Delta(T, T^*)] - s(T^*)) \text{ , where } T^* \text{ is the ground truth parsed tree}$$
</div>

<p>where \(\Delta\) indicates a hamming loss, which is a commonly used to indicate loss in multi label classification task.
This makes sense because multiple labelings are conducted on a tree for each constituent - as VB, NP, ADJP, and etc.
I recommend refering to the paper for more details on the architecture as what drove me to discuss this paper is on the next section.</p>

<h2 id="separating-content-and-position-information">Separating Content and Position Information</h2>

<p>Kitaev and Klein claim the following: content and position information should be balanced throughout learning, but in practice it does not.
Thus, they seek for a way to separate the information within the network.</p>

<p>Given the equation \(z_t = w_t + m_t + p_t\), where \(w_t, m_t, p_t\) each means word, tag, and positional embedding,
approach using this was limitted in its peformance as positional information dominates content information.</p>

<p>Authors‚Äô first attempt was to separate information by concatanating as such: \(z_t = [w_t + m_t;p_t]\).
However, regarding this approach intermingles both information in high deimention network, this method results the same.
For a better explanation, given the following relation \(q = q^{(c)} + q^{(p)}\) and \(k = k^{(c)} + k^{(p)}\),
where \(c\) and \(p\) each means content and position information,
throughout attention mechanism, we see they intermingle and loss balance eventually.</p>

<div style="width: 100%; overflow: scroll;">
    $$ q\cdot k = (q^{(c)} + q^{(p)})\cdot (k^{(c)} + k^{(p)}) $$
</div>

<p>This happens because weights multiplied to key and value takes content and position inforamtion. 
Thus, authors decide to completely factor out each inforamtion by reforming weights operated on input like below,</p>

<div style="width: 100%; overflow: scroll;">
    $$ W = \begin{bmatrix} W^{(c)} &amp; 0 \\ 0 &amp; W^{(p)} \end{bmatrix} $$
</div>

<p>Then, \(W c = [W^{(c)}x^{(c)};W^{(p)}x^{(p)}]\), which means unlike their initial approach,</p>

<div style="width: 100%; overflow: scroll;">
    $$ q\cdot k = q^{(c)}\cdot k^{(c)} + q^{(p)}\cdot k^{(p)}) $$
</div>
:ET